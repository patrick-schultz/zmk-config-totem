//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h> 

// needs to come after behaviors.dtsi, as it redefines ZMK_MACRO
#include "zmk-helpers/helper.h"

#include "keypos_totem.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 L5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 R5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#define XXX &none
#define ___ &trans

/* Global settings */

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define LAYER_TAPPING_TERM 200
#define AK_TAPPING_TERM 40
#define LK_TAPPING_TERM 200
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define ZMK_MACRO_FAST(NAME, ...) \
    ZMK_BEHAVIOR(NAME, macro, \
        wait-ms = <0>; \
        tap-ms = <0>; \
        bindings = __VA_ARGS__ ; \
    )

ZMK_STICKY_KEY(long_sticky,
    bindings = <&kp>;
    release-after-ms = <5000>;
    quick-release;)

ZMK_HOLD_TAP(layer_sticky,
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&long_sticky>;)
    
/* Layers */

#define ALPHA 0
#define l_camel 1
#define l_snake 2
#define NUM 3
#define EXT 4
#define FN 5
#define ALPHA_ALL ALPHA l_camel l_snake

/* Homerow mods */

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <HM_TAPPING_TERM>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <170>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T)

MAKE_HRM(hrm_h, &kp, &ak_h, KEYS_L KEYS_T)

ZMK_HOLD_TAP(lt_oss,
    flavor = "balanced";
    tapping-term-ms = <LAYER_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&sk>;
)

/* Combos */

#undef COMBO_TERM
#define COMBO_TERM 40
#define COMBO_TERM_FAST 30
#define COMBO_TERM_SLOW 40
#define COMBO_TERM_VERT 70

// h-digraph combos

ZMK_COMBO(combo_wh,   &Wh,                      LT3 LT2,     ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_gh,   &Gh,                      LT2 LT1,     ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_ght,  &ght,                     LT3 LT2 LT1, ALPHA_ALL, COMBO_TERM_SLOW)
MAKE_HRM(hm_sh, &kp,  &Sh, KEYS_L KEYS_T)
ZMK_COMBO(combo_sh,   &hm_sh LC(LALT) 0,        LM4 LM3,     ALPHA_ALL, COMBO_TERM_FAST)
MAKE_HRM(hm_sch, &kp, &Sch, KEYS_L KEYS_T)
ZMK_COMBO(combo_sch,  &hm_sch LC(LA(LCMD)) 0,   LM4 LM3 LM2, ALPHA_ALL, COMBO_TERM_SLOW)
MAKE_HRM(hm_ch, &kp,  &Ch, KEYS_L KEYS_T)
ZMK_COMBO(combo_ch,   &hm_ch LA(LCMD) 0,        LM3 LM2,     ALPHA_ALL, COMBO_TERM_FAST)
MAKE_HRM(hm_th, &kp,  &Th, KEYS_L KEYS_T)
ZMK_COMBO(combo_th,   &hm_th LG(LSHFT) 0,       LM2 LM1,     ALPHA_ALL, COMBO_TERM_FAST)
MAKE_HRM(hm_tch, &kp, &Tch, KEYS_L KEYS_T)
ZMK_COMBO(combo_tch,  &hm_tch LA(LG(LSHFT)) 0,  LM3 LM2 LM1, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_ph,   &Ph,                      LB3 LB2,     ALPHA_ALL, COMBO_TERM_FAST)

// editing combos

ZMK_COMBO(undo, &kp LG(Z),       LB4 LB3,     ALL, COMBO_TERM_FAST)
ZMK_COMBO(redo, &kp LG(LS(Z)),   LB4 LB3 LB2, ALL, COMBO_TERM_SLOW)
ZMK_COMBO(cut,  &kp LG(X),       LB3 LB2 LB1, ALL, COMBO_TERM_SLOW)
ZMK_COMBO(copy, &kp LG(C),       LB3 LB1,     ALL, COMBO_TERM_SLOW)
ZMK_COMBO(pste, &kp LG(V),       LB2 LB1,     ALL, COMBO_TERM_FAST)

ZMK_COMBO(combo_esc, &hmr RG(RSHFT) ESC, RM1 RM2, ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_esc_vert, &kp ESC,       RT1 RM1, ALL, COMBO_TERM_VERT)
ZMK_COMBO(combo_ret, &hmr RG(RSHFT) RET, RB1 RB2, ALL, COMBO_TERM_FAST)

// glyph combos

ZMK_COMBO(combo_qu,      &kp Q,   LT3 LT1, ALPHA_ALL, 80)
ZMK_COMBO(combo_z,       &kp Z,   LT4 LT3, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_qu_vert, &kp Q,   LT3 LM3, ALPHA_ALL, COMBO_TERM_VERT)
ZMK_COMBO(combo_z_vert,  &kp Z,   LT4 LM4, ALPHA_ALL, COMBO_TERM_VERT)

ZMK_COMBO(combo_colon, &kp COLON,         RT1 RT3, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_excl,  &kp EXCL,          RT1 RT2, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_qmark, &kp QMARK,         RT2 RT3, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_grave, &kp GRAVE,         RT3 RT4, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_at,    &kp AT,            RT0 RT1, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_semi,  &kp SEMI,          RM0 RM1, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_under, &kp UNDER,         RB1 RB3, ALPHA_ALL, COMBO_TERM_SLOW)
ZMK_COMBO(combo_equal, &kp EQUAL,         RB2 RB3, ALPHA_ALL, COMBO_TERM_FAST)
ZMK_COMBO(combo_ndash, &kp LA(MINUS),     RB0 RB1, ALPHA_ALL, COMBO_TERM_FAST) // N-dash
ZMK_COMBO(combo_mdash, &kp LA(LS(MINUS)), RB0 RB2, ALPHA_ALL, COMBO_TERM_SLOW) // M-dash

// macros for h-digraphs
    
ZMK_MACRO_FAST(Wh,
    <&macro_tap &kp W>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Gh,
    <&macro_tap &kp G>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(ght, <&kp G &kp H &kp T>)
ZMK_MACRO_FAST(Sh,
    <&macro_tap &kp S>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Sch,
    <&macro_tap &kp S>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp C &kp H>
)
ZMK_MACRO_FAST(Ch,
    <&macro_tap &kp C>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Th,
    <&macro_tap &kp T>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)
ZMK_MACRO_FAST(Tch,
    <&macro_tap &kp T>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp C &kp H>
)
ZMK_MACRO_FAST(Ph,
    <&macro_tap &kp P>
    , <&macro_release &kp LSHFT &kp RSHFT>
    , <&macro_tap &kp H>
)

/* Adaptives */

#define AK(NAME, TRIGGER, BINDINGS) \
    akt_##NAME { trigger-keys = <TRIGGER>; max-prior-idle-ms = <AK_TAPPING_TERM>; bindings = BINDINGS; }

ZMK_ADAPTIVE_KEY(ak_h,
    bindings = <&kp H>;
    AK(ah, A, <&kp U>);
    AK(uh, U, <&kp A>);
    AK(eh, E, <&kp O>);
    AK(oh, O, <&kp E>);
)

/* Mod morphs */

ZMK_MOD_MORPH(CmmaSemi,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&typeSemi>;
)
ZMK_MACRO(typeSemi,
    bindings = <&macro_release &kp LSHFT>
            , <&macro_tap &kp SEMICOLON>;
)
ZMK_MOD_MORPH(DotColn,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)
ZMK_MOD_MORPH(SlshStar,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp FSLH>, <&kp STAR>;
)
ZMK_MOD_MORPH(MinusPlus,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp PLUS>;
)
ZMK_MOD_MORPH(DqtLbkt,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DQT>, <&kp LBKT>;
)
ZMK_MOD_MORPH(SqtRbkt,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp SQT>, <&kp RBKT>;
)

ZMK_MOD_MORPH(qexl,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)

ZMK_MOD_MORPH(dunder,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp UNDER>;
)

ZMK_MOD_MORPH(bspc_del,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp BSPC>, <&kp DEL>;
)

ZMK_MACRO(esc_cancel,
    bindings = <&kp ESC &kp K_CANCEL>;
)

// keymap

ZMK_LAYER(default_layer,
     &kp X         &kp W        &kp M        &kp G          &kp J        &bspc_del      &DotColn      &SlshStar    &DqtLbkt     &SqtRbkt
     &hml LCTRL S  &hml LALT C  &hml LCMD N  &hml LSHFT T   &kp K        &CmmaSemi      &hmr RSHFT A  &hmr RCMD E  &hmr RALT I  &hrm_h RCTRL H
XXX  &kp B         &kp P        &kp L        &kp D          &kp V        &MinusPlus     &kp U         &kp O        &kp Y        &kp F         XXX
                                XXX          &sk LSHFT      &lt NUM R    &lt EXT SPACE  &lt_oss FN LSHFT  XXX
)

ZMK_LAYER(l_camel,
        ___     ___     ___     ___     ___    ___     ___     ___     ___     ___
        ___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___     ___    ___     ___     ___     ___     ___     ___
                       ___ &kp K_CANCEL ___ &layer_sticky EXT LSHFT ___ ___
)

ZMK_LAYER(l_snake,
        ___     ___     ___     ___     ___    ___     ___     ___     ___     ___
        ___     ___     ___     ___     ___    ___     ___     ___     ___     ___
___     ___     ___     ___     ___     ___    ___     ___     ___     ___     ___     ___
                       ___ &kp K_CANCEL ___  &lt EXT UNDER ___ ___
)

ZMK_LAYER(num_layer,
     &kp CARET  &kp LT           &kp GT          &kp DOLLAR        &kp AMPS     ___       &kp N7            &kp N8          &kp N9           XXX
     &kp HASH   &hml LALT MINUS  &hml LCMD PLUS  &hml LSHFT EQUAL  &kp PIPE     &kp DOT   &hmr RSHFT N4     &hmr RCMD N5    &hmr RALT N6     &kp RCTRL
___  &kp BSLH   &kp FSLH         &kp STAR        &kp PRCNT         &kp TILDE    &kp N0    &kp N1            &kp N2          &kp N3           XXX        ___
                                 ___             ___               ___          ___       &kp ESC           ___
)

ZMK_LAYER(ext_layer,
     &kp Z      &kp Q           &kp LBRC        &kp RBRC          XXX          &kp PG_UP  &kp HOME         &kp UP          &kp END          XXX 
     &kp LCTRL  &kp LALT        &hml LCMD LPAR  &hml LSHFT RPAR   XXX          &kp PG_DN  &hmr RSHFT LEFT  &hmr RCMD DOWN  &hmr RALT RIGHT  &kp RCTRL
___  XXX        XXX             &kp LBKT        &kp RBKT          XXX          &none      &kp BSPC         &kp TAB         &kp DEL          XXX        ___
                                ___             &kp LS(TAB)       ___          ___        ___              ___
)

ZMK_LAYER(fn_layer,
     XXX        &kp C_PREV  &kp C_PP      &kp C_NEXT    &bootloader    &bootloader    &kp F7  &kp F8  &kp F9  &kp F12
     &kp LCTRL  &kp LALT    &kp LCMD      &kp LSHFT     &sys_reset     &sys_reset     &kp F4  &kp F5  &kp F6  &kp F11
___  XXX        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &bt BT_CLR_ALL &bt BT_CLR_ALL &kp F1  &kp F2  &kp F3  &kp F10  ___
                            ___           &kp K_CANCEL  ___            ___            ___     ___
)